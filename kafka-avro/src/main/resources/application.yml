topic:
  name: users
  partitions-num: 3
  replication-factor: 1
server:
  port: 9080
spring:
  kafka:
    properties:
      bootstrap.servers: localhost:9092
      schema.registry.url: http://localhost:8081
    consumer:
      group-id: kafka-avro
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
    template:
      default-topic:
logging:
  level:
    root: info

# spring cloud streams
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms: 1000
spring.cloud.stream.kafka.streams:
  binder.configuration:
    default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
  bindings.users.consumer.application-id: user-filter
spring.cloud.stream.bindings.users-filtered:
  destination: users-filtered
  producer:
    useNativeEncoding: true
spring.cloud.stream.bindings.users:
  destination: users
  consumer:
    useNativeDecoding: true